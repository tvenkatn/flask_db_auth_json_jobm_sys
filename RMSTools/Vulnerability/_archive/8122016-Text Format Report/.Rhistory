cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppcghscc=paste0(Perils[j],"cghs",Countries[i],collapse="")
cghs_dif = data.table(sqlQuery(dbHandle,paste0("SELECT cghs.HAZ_TYPE, ", ppcghscc,".HAZ_TYPE,cghs.HAZ_SCALE, ", ppcghscc,".HAZ_SCALE, cghs.COVERAGE, ", ppcghscc,".COVERAGE
FROM cghs
INNER JOIN ", ppcghscc," ON cghs.country=",dummyname," and  ", ppcghscc,".CGHS_ID=cghs.CGHS_ID and
(", ppcghscc,".HAZ_TYPE!=(select Map_HazardType.haz_type from Map_HazardType where haz_type_id=cghs.HAZ_TYPE) or
", ppcghscc,".HAZ_SCALE!=(select Map_HazardSCALE.haz_SCALE from Map_HazardSCALE where haz_SCALE_id=cghs.HAZ_SCALE)or
", ppcghscc,".COVERAGE!=(select Map_COVERAGE.coverage from Map_COVERAGE where COVERAGE_id=cghs.COVERAGE))")))
ncghs_dif=nrow(cghs_dif)
if (ncghs_dif!=0){
cat(paste0("\n","      ","Numberof rows with unmatched values =",ncghs_dif,"\n","\n","\n","\n"), file = reportCon, append = TRUE)
} else {cat(paste0("\n","      ","PASSED! ALL RECORDS WITH THE SAME CGHS_ID MATCHED BETWEEN TWO TABLES!"), file = reportCon, append = TRUE)   }
}
}
# Check if all CVG_GRADEs are between 0 and 4
# for NG table
CVg_Grade_Bound=data.table(sqlQuery(dbHandle, paste0("SELECT *  FROM cghs
where
[country]=",dummyname,"
and   [CVG_GRADE] not between 0 and 4")))
if (nrow(CVg_Grade_Bound) !=0){
cat(paste0("\n","      ","CVG_GRADES ARE NOT BETWEEN 0 AND 4 in CGHS TABLE"), file = reportCon, append = TRUE)
} else {
cat(paste0("\n","      ","PASSED!CVG_GRADES ARE BETWEEN 0 AND 4 in CGHS TABLE"), file = reportCon, append = TRUE)
}
# Check if all CVG_GRADEs are Either 0 or includes all values 0-4
# for NG table
CVg_Grade_count=data.table(sqlQuery(dbHandle, paste0("select COUNT(distinct CVG_GRADE) from
(SELECT country,COVERAGE,CVG_GRADE FROM cghs
where
[country]=",dummyname,"
group by   country, COVERAGE, [CVG_GRADE]) s")))
if (CVg_Grade_count!=0 & CVg_Grade_count!=5){
cat(paste0("\n","      ","CVG_GRADES DO NOT INCLUDE ONLY 0 OR ALL VALUES BETWEEN 0 AND 4 in CGHS TABLE"), file = reportCon, append = TRUE)
} else {
cat(paste0("\n","      ","PASSED!CVG_GRADES INCLUDE ONLY 0 OR ALL VALUES BETWEEN 0 AND 4 in CGHS TABLE"), file = reportCon, append = TRUE)
}
cat(paste0("\n","-----------------------------------------------------------------------------------------------------------------","\n"), file = reportCon, append = TRUE)
}
}
# Check if all CVG_GRADEs are between 0 and 4 For RiskLink Tables
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppcghscc=paste0(Perils[j],"cghs",Countries[i],collapse="")
CVg_Grade_Bound=data.table(sqlQuery(dbHandle, paste0("SELECT *  FROM ", ppcghscc,"
where
[CVG_GRADE] not between 0 and 4")))
if (nrow(CVg_Grade_Bound) !=0){
cat(paste0("\n","      ","CVG_GRADES ARE NOT BETWEEN 0 AND 4 in ", ppcghscc,"  TABLE"), file = reportCon, append = TRUE)
} else {
cat(paste0("\n","      ","PASSED!CVG_GRADES ARE BETWEEN 0 AND 4 in ", ppcghscc,"  TABLE"), file = reportCon, append = TRUE)
}
# Check if all CVG_GRADEs are Either 0 or includes all values 0-4
# for NG table
CVg_Grade_count=data.table(sqlQuery(dbHandle, paste0("select COUNT(distinct CVG_GRADE) from
(SELECT COVERAGE,CVG_GRADE FROM ", ppcghscc,"
group by COVERAGE, [CVG_GRADE]) s")))
if (CVg_Grade_count!=0 & CVg_Grade_count!=5){
cat(paste0("\n","      ","CVG_GRADES DO NOT INCLUDE ONLY 0 OR ALL VALUES BETWEEN 0 AND 4 in CGHS TABLE"), file = reportCon, append = TRUE)
} else {
cat(paste0("\n","      ","PASSED!CVG_GRADES INCLUDE ONLY 0 OR ALL VALUES BETWEEN 0 AND 4 in CGHS TABLE"), file = reportCon, append = TRUE)
}
cat(paste0("\n","-----------------------------------------------------------------------------------------------------------------","\n"), file = reportCon, append = TRUE)
}
}
}
}
#### Test7- Check Imap and eqimapus tables: KEY is  INV_RECNUM
Test_7 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-7:TEST IMAP AND EQIMAP TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppimapcc=paste0(Perils[j],"imap",Countries[i],collapse="")
imap_dif = data.table(sqlQuery(dbHandle,paste0("SELECT imap.INV_RECNUM, ", ppimapcc,".INV_RECNUM
FROM imap
INNER JOIN ", ppimapcc," ON imap.country=",dummyname," and ", ppimapcc,".INV_RECNUM=imap.INV_RECNUM and
(", ppimapcc,".INV_KEY!=(select Map_InvKey.inv_key from Map_InvKey where inv_key_id= imap.INV_KEY) or
(", ppimapcc,".INV_KEY is NULL and
(select Map_InvKey.inv_key from Map_InvKey where inv_key_id= imap.INV_KEY)is not NULL) or
", ppimapcc,".MAPCCLSSIF!=(select Map_MAPCCLSSIF.mapcclssif from Map_MAPCCLSSIF where mapcclssif_id= imap.MAPCCLSSIF)or
(", ppimapcc,".MAPCCLSSIF is NULL and
(select Map_MAPCCLSSIF.mapcclssif from Map_MAPCCLSSIF where mapcclssif_id= imap.MAPCCLSSIF)is not NULL) or
", ppimapcc,".MAPCCTIER1!=(select Map_MAPCCTier1.mapcctier1 from Map_MAPCCTier1 where mapcctier1_id= imap.MAPCCTIER1) or
(", ppimapcc,".MAPCCTIER1 is NULL and
(select Map_MAPCCTier1.mapcctier1 from Map_MAPCCTier1 where mapcctier1_id= imap.MAPCCTIER1)is not NULL) or
", ppimapcc,".MAPCCTIER2!=(select Map_MAPCCTIER2.MAPCCTIER2 from Map_MAPCCTIER2 where MAPCCTIER2_id= imap.MAPCCTIER2) or
(", ppimapcc,".MAPCCTIER2 is NULL and
(select Map_MAPCCTIER2.MAPCCTIER2 from Map_MAPCCTIER2 where MAPCCTIER2_id= imap.MAPCCTIER2)is not NULL) or
", ppimapcc,".MAPCCTIER3!=(select Map_MAPCCTIER3.MAPCCTIER3 from Map_MAPCCTIER3 where MAPCCTIER3_id= imap.MAPCCTIER3) or
(", ppimapcc,".MAPCCTIER3 is NULL and
(select Map_MAPCCTIER3.MAPCCTIER3 from Map_MAPCCTIER3 where MAPCCTIER3_id= imap.MAPCCTIER3)is not NULL) or
", ppimapcc,".INV_OCC!=(select Map_InvOcc.inv_occ from Map_InvOcc where inv_occ_id= imap.INV_OCC) or
(", ppimapcc,".INV_OCC is NULL and
(select Map_InvOcc.inv_occ from Map_InvOcc where inv_occ_id= imap.INV_OCC)is not NULL) or
", ppimapcc,".INV_OCC!=(select Map_InvOcc.inv_occ from Map_InvOcc where inv_occ_id= imap.INV_OCC) or
(", ppimapcc,".INV_OCC is NULL and
(select Map_InvOcc.inv_occ from Map_InvOcc where inv_occ_id= imap.INV_OCC)is not NULL) or
", ppimapcc,".CV_KEY!=(select Map_CvKey.cv_key from Map_CvKey where cv_key_id= imap.CV_KEY) or
(", ppimapcc,".CV_KEY is NULL and
(select Map_CvKey.cv_key from Map_CvKey where cv_key_id= imap.CV_KEY)is not NULL) or
", ppimapcc,".BR_TVKEY!=(select Map_BRTVKey.br_tvkey from Map_BRTVKey where br_tvkey_id= imap.BR_TVKEY) or
(", ppimapcc,".BR_TVKEY is NULL and
(select Map_BRTVKey.br_tvkey from Map_BRTVKey where br_tvkey_id= imap.BR_TVKEY)is not NULL) or
", ppimapcc,".BR_DRKEY!=(select Map_BRDRKey.br_drkey from Map_BRDRKey where br_drkey_id= imap.BR_DRKEY) or
(", ppimapcc,".BR_DRKEY is NULL and
(select Map_BRDRKey.br_drkey from Map_BRDRKey where br_drkey_id= imap.BR_DRKEY)is not NULL)
)
")))
nimap_dif=nrow(imap_dif)
if (nimap_dif!=0){
cat(paste0("Number of rows with unmatched records =",nimap_dif,"\n"), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS WITH THE SAME INV_RECNUM MATCHED BETWEEN TWO TABLES!"), file = reportCon, append = TRUE)  }
}
}
}
}
#### Test8- Check vinv and eqvinvus tables KEy: INV_RECNUM and PDC_NUM and PDC_GROUP
Test_8 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-8:TEST VINV AND PPVINVCC TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvinvcc=paste0(Perils[j],"vinv",Countries[i],collapse="")
inv_dif = data.table(sqlQuery(dbHandle,paste0(" SELECT vinv.INV_RECNUM,vinv.PDC_GROUP,vinv.PDC_NUM, ", ppvinvcc,".INV_RECNUM,", ppvinvcc,".PDC_GROUP,", ppvinvcc,".PDC_NUM
FROM vinv
INNER JOIN ", ppvinvcc," ON vinv.country=",dummyname," and  (vinv.INV_RECNUM= ", ppvinvcc,".INV_RECNUM and vinv.PDC_GROUP=", ppvinvcc,".PDC_GROUP and vinv.PDC_NUM =", ppvinvcc,".PDC_NUM)
and ((ROUND(vinv.DEF_INVPCT,0)!=ROUND(", ppvinvcc,".DEF_INVPCT,0)
or (ROUND(vinv.CT,4)!=ROUND(", ppvinvcc,".CT,4)))
or (vinv.AVGSTHT!=", ppvinvcc,".AVGSTHT) or (vinv.DNUMSTOR!=", ppvinvcc,".DNUMSTOR))"
)))
ninv_dif=nrow(inv_dif)
if (ninv_dif!=0){
cat(paste0("Number of rows with unmatched records =",ninv_dif,"\n"), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS WITH THE SAME INV_RECNUM, PDC_GROUP,and PDC_NUM MATCHED BETWEEN TWO TABLES!"), file = reportCon, append = TRUE)  }
}
}
}
}
###TEST-9:TEST VDC0 TABLE
####### TEST vdc0
Test_9 <- function (dbHandle,reportCon,Perils,Countries,tables,VulnDb_ExpectedTables,NGTableExist){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-9:TEST VDC0 TABLE',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvdc0cc=paste0(Perils[j],"vdc0",Countries[i],collapse="")
ppvhazcc=paste0(Perils[j],"vhaz",Countries[i],collapse="")
eqvdc0 = sqlQuery(dbHandle, paste0("select ",ppvhazcc,".DC_KEY,",ppvhazcc,".CGHS_ID,",ppvdc0cc,".HAZPARAMID,",ppvhazcc,".HAZ_SEV,",ppvdc0cc,".DAMAGE_PCT,",ppvdc0cc,".PDC_NUM
from ",ppvdc0cc,"
full outer join ",ppvhazcc," on ",ppvhazcc,".HAZPARAMID=",ppvdc0cc,".HAZPARAMID
order by PDC_NUM,DC_KEY,HAZPARAMID"))
eqvdc0 = data.table(eqvdc0)
eqvdcD <- eqvdc0[,.(difference = diff(DAMAGE_PCT)),by=c("PDC_NUM","DC_KEY","CGHS_ID")]
neqvdcD=nrow(eqvdcD[difference<0])
if (neqvdcD!=0){
cat(paste0("Number of damage curves which are not motonically increasing=",nvdcD,"\n"), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL VDC0 CURVES ARE MONOTONICALLY INCREASING!"), file = reportCon, append = TRUE)  }
}
}
}
if (NGTableExist){
cat(paste0("\n","CHECK NG TABLES: ","\n"), file = reportCon, append = TRUE)
vdc0 = sqlQuery(dbHandle, "select * From vdc0")
vdc0 = data.table(vdc0)
# Check if all damage curves are monotonically increasing
vdcD <- vdc0[,.(difference = diff(DAMAGE_PCT)),by=c("country","PDC_NUM","dc_key","CGHS_ID")]
nvdcD=nrow(vdcD[difference<0])
if (nvdcD!=0){
cat(paste0("Number of damage curves which are not motonically increasing=",nvdcD,"\n"), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL VDC0 CURVES ARE MONOTONICALLY INCREASING!"), file = reportCon, append = TRUE)  }
# Check if the x-axis on damage curves are motonically increasing
vdcDHaz <- vdc0[,.(difference=diff(HAZ_SEV)),by=c("country","PDC_NUM","dc_key","CGHS_ID")]
nvdcDHaz=nrow(vdcDHaz[difference<0])
if (nvdcDHaz!=0){
cat(paste0("Number of damage curves in which x-axis is not motonically increasing= ",nvdcDHaz,"\n"), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! X-AXES ON ALL VDC0 CURVES ARE MONOTONICALLY INCREASING!","\n"), file = reportCon, append = TRUE)  }
# Check if curves with the same CGHS_ID have the same number or records.
Frequency=data.table(sqlQuery(dbHandle,"
SELECT country,DC_KEY, PDC_NUM, CGHS_ID, COUNT(*) as Freq
FROM vdc0
GROUP BY  country, DC_KEY, PDC_NUM, CGHS_ID
"))
Freq_Diff=Frequency[,.(difference=diff(Freq)),by=c("country","CGHS_ID")]
nFreq_Diff=nrow(Freq_Diff[difference!=0])
if (nFreq_Diff!=0){
cat(paste0("Number of damage curves with the same CGHS-ID but different number of records= ",nFreq_Diff,"\n"), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL CURVES WITH THE SAME CGHS-ID HAVE THE SAME NUMBER OF RECORDS!"), file = reportCon, append = TRUE)  }
}
}
####Test-10: Test vcc and eqvccus tables
Test_10 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-10:TEST VCC AND PPVCCCC TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvcccc=paste0(Perils[j],"vcc",Countries[i],collapse="")
vcc_dif = data.table(sqlQuery(dbHandle,paste0(" SELECT vcc.ConstructionID, ", ppvcccc,".C_CLASSIF,", ppvcccc,".C_CLASS
FROM ", ppvcccc,"
INNER JOIN vcc ON vcc.country=",dummyname," and
(vcc.ConstructionID=(select distinct Map_ConstructionNew.ConstructionID from Map_ConstructionNew where ConstructionCode= ", ppvcccc,".C_CLASS and
ConstructionScheme=", ppvcccc,".C_CLASSIF and CountryRMSCode=vcc.country) and
((", ppvcccc,".MAPCCTIER1!=(select Map_MAPCCTier1.mapcctier1 from Map_MAPCCTier1 where mapcctier1_id= vcc.MAPCCTIER1) or
(", ppvcccc,".MAPCCTIER1 is NULL and (select Map_MAPCCTier1.mapcctier1 from Map_MAPCCTier1 where mapcctier1_id= vcc.MAPCCTIER1)is not NULL))or
(", ppvcccc,".MAPCCTIER2!=(select Map_MAPCCTier2.mapcctier2 from Map_MAPCCTier2 where mapcctier2_id= vcc.MAPCCTIER2) or
(", ppvcccc,".MAPCCTIER2 is NULL and (select Map_MAPCCTier2.mapcctier2 from Map_MAPCCTier2 where mapcctier2_id= vcc.MAPCCTIER2)is not NULL))or
(", ppvcccc,".MAPCCTIER3!=(select Map_MAPCCTier3.mapcctier3 from Map_MAPCCTier3 where mapcctier3_id= vcc.MAPCCTIER3) or
(", ppvcccc,".MAPCCTIER3 is NULL and (select Map_MAPCCTier3.mapcctier3 from Map_MAPCCTier3 where mapcctier3_id= vcc.MAPCCTIER3)is not NULL))or
(", ppvcccc,".MAPCCLSSIF!=(select Map_MAPCCLSSIF.mapcclssif from Map_MAPCCLSSIF where mapcclssif_id= vcc.MAPCCLSSIF))))
")))
nvcc_dif=nrow(vcc_dif)
if (nvcc_dif!=0){
cat(paste0("Number of unmatched records= ",nvcc_dif,"\n"), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS MATCHED!"), file = reportCon, append = TRUE)  }
}
}
}
}
####Test-11: Test vocc and eqvoccus tables
Test_11 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-11:TEST VOCC AND PPVOCCCC TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvocccc=paste0(Perils[j],"vocc",Countries[i],collapse="")
vocc_dif = data.table(sqlQuery(dbHandle,paste0(" SELECT vocc.OccupancyID, ", ppvocccc,".O_CLASSIF,", ppvocccc,".O_CLASS
FROM ", ppvocccc,"
INNER JOIN vocc ON vocc.country=",dummyname," and
(vocc.OccupancyID=(select Map_OccupancyNew.OccupancyID from Map_OccupancyNew where OccupancyCode= ", ppvocccc,".O_CLASS and
OccupancyScheme=", ppvocccc,".O_CLASSIF and CountryRMSCode=vocc.country) and
((vocc.WC_OCC!=", ppvocccc,".WC_OCC) or (vocc.BI_OCC!=", ppvocccc,".BI_OCC) or
(", ppvocccc,".AGGHAZ_OCC!=(select Map_AggHazOcc.AggHazOcc from Map_AggHazOcc where AggHazOccID= vocc.AggHazOccId) or
(", ppvocccc,".AGGHAZ_OCC is NULL and (select Map_AggHazOcc.AggHazOcc from Map_AggHazOcc where AggHazOccID= vocc.AggHazOccId)is not NULL))or
(", ppvocccc,".ESDB_OCC!=(select Map_ESDBOcc.esdb_occ from Map_ESDBOcc where esdb_occ_id= vocc.ESDB_OCC) or
(", ppvocccc,".ESDB_OCC is NULL and (select Map_ESDBOcc.esdb_occ from Map_ESDBOcc where esdb_occ_id= vocc.ESDB_OCC)is not NULL))or
(", ppvocccc,".INV_OCC!=(select Map_InvOcc.inv_occ from Map_InvOcc where inv_occ_id= vocc.INV_OCC) or
(", ppvocccc,".INV_OCC is NULL and (select Map_InvOcc.inv_occ from Map_InvOcc where inv_occ_id= vocc.INV_OCC)is not NULL))or
(", ppvocccc,".FFEQ_OCC!=(select Map_FFEQOcc.ffeq_occ from Map_FFEQOcc where ffeq_occ_id= vocc.FFEQ_OCC) or
(", ppvocccc,".FFEQ_OCC is NULL and (select Map_FFEQOcc.ffeq_occ from Map_FFEQOcc where ffeq_occ_id= vocc.FFEQ_OCC)is not NULL))))
")))
nvocc_dif=nrow(vocc_dif)
if (nvocc_dif!=0){
cat(paste0("Number of unmatched records= ",nvocc_dif,"\n"), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS MATCHED!"), file = reportCon, append = TRUE)  }
}
}
}
}
####Test-12:TEST IMAP AND VINV
Test_12 <- function (dbHandle,reportCon,Countries){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-12:TEST EXISTENCE OF PDC_NUM IN VINV IF THE SAME MODIF_PDC EXISTS IN IMAP FOR A GIVEN INV_RECNUM',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
dummyname=paste0("'",Countries[i],"'",collapse="")
PDC_NUM_Diff = data.table(sqlQuery(dbHandle,paste0("select imap.INV_RECNUM, imap.ModifPDC  from imap
inner join (  SELECT  imap.INV_RECNUM as rec, imap.ModifPDC as modif, imap.country as country
FROM imap
inner JOIN vinv ON imap.INV_RECNUM=vinv.INV_RECNUM and imap.ModifPDC!=vinv.PDC_NUM
and  imap.ModifPDC!=0 and vinv.INV_RECNUM is not null ) s
on imap.country=",dummyname," and s.country=",dummyname," and imap.INV_RECNUM=s.rec and imap.ModifPDC!=s.modif
")))
nPDC_NUM_Diff=nrow(PDC_NUM_Diff)
if (nPDC_NUM_Diff!=0){
cat(paste0("\n","      ","Number of unmatched records= ",nPDC_NUM_Diff), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS MATCHED!"), file = reportCon, append = TRUE)  }
}
}
####Test-13:CASE SENSITIVITY
Test_13 <- function (dbHandle,reportCon){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-13:TEST FOR CASE SENSITIVITY',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
Map_InvOcc_Sensitivity_diff=CaseCheck('Map_InvOcc','inv_occ')
nMap_InvOcc_Sensitivity_diff=nrow(Map_InvOcc_Sensitivity_diff)
if (nMap_InvOcc_Sensitivity_diff!=0){
cat(paste0("\n","      ","Number of records with unmatched cases in nMap_InvOcc= ",nMap_InvOcc_Sensitivity_diff), file = reportCon, append = TRUE)
}
Map_InvKey_Sensitivity_diff=CaseCheck('Map_InvKey','inv_key')
nMap_InvKey_Sensitivity_diff=nrow(Map_InvKey_Sensitivity_diff)
if (nMap_InvKey_Sensitivity_diff!=0){
cat(paste0("\n","      ","Number of records with unmatched cases in nMap_InvKey= ",nMap_InvKey_Sensitivity_diff), file = reportCon, append = TRUE)
}
if (nMap_InvKey_Sensitivity_diff==0 & nMap_InvOcc_Sensitivity_diff==0 ){
cat(paste0("\n","      ","PASSED! NO CASE SENSITIVITY PROBLEM IS FOUND!"), file = reportCon, append = TRUE)  }
}
####Test-14: CONSISTENCY OF DATA BETWEEN VCC AND IMAP TABLES (KEY IS COMBINATION OF MAPCLASSIF, TIER 1, TIER 2, AND TIER 3)
Test_14 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-14:CONSISTENCY OF DATA BETWEEN VCC AND IMAP TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvcccc=paste0(Perils[j],"vcc",Countries[i],collapse="")
ppimapcc=paste0(Perils[j],"imap",Countries[i],collapse="")
vcc_imap_dif = data.table(sqlQuery(dbHandle,paste0("   select CC_RECNUM, MAPCCLSSIF, MAPCCTIER1, MAPCCTIER2, MAPCCTIER3 from ",ppvcccc,"
where not exists (
select MAPCCLSSIF, MAPCCTIER1, MAPCCTIER2, MAPCCTIER3 from ",ppimapcc,"
where
(",ppvcccc,".MAPCCLSSIF=",ppimapcc," .MAPCCLSSIF or (",ppvcccc,".MAPCCLSSIF is null and ",ppimapcc," .MAPCCLSSIF is null)) and
(",ppvcccc,".MAPCCTIER1=",ppimapcc," .MAPCCTIER1 or (",ppvcccc,".MAPCCTIER1 is null and ",ppimapcc," .MAPCCTIER1 is null)) and
(",ppvcccc,".MAPCCTIER2=",ppimapcc," .MAPCCTIER2 or (",ppvcccc,".MAPCCTIER2 is null and ",ppimapcc," .MAPCCTIER2 is null)) and
(",ppvcccc,".MAPCCTIER3=",ppimapcc," .MAPCCTIER3 or (",ppvcccc,".MAPCCTIER3 is null and ",ppimapcc," .MAPCCTIER3 is null)))
")))
nvcc_imap_dif=nrow(vcc_imap_dif)
if (nvcc_imap_dif!=0){
cat(paste0("Number of unmatched records= ",nvcc_imap_dif,"\n"), file = reportCon, append = TRUE)
cat(paste0("      ","Differece(s) between the vcc and imap include following CC_RECNUM(s):","\n"), file = reportCon, append = TRUE)
cat(paste0("      ",vcc_imap_dif$CC_RECNUM), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS MATCHED!"), file = reportCon, append = TRUE)  }
}
}
}
}
####Test-15: CONSISTENCY OF DATA BETWEEN VOCC AND IMAP TABLES (KEY IS INV_VOCC)
Test_15 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-14:CONSISTENCY OF DATA BETWEEN VCC AND IMAP TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvocccc=paste0(Perils[j],"vocc",Countries[i],collapse="")
ppimapcc=paste0(Perils[j],"imap",Countries[i],collapse="")
vocc_imap_dif = data.table(sqlQuery(dbHandle,paste0("    select (INV_OCC) from ",ppvocccc,"  a
where
not exists (select INV_OCC from ",ppimapcc,"  b
where a.INV_OCC=b.INV_OCC) ")))
nvocc_imap_dif=nrow(vcc_imap_dif)
if (nvocc_imap_dif!=0){
cat(paste0("Number of unmatched records= ",nvocc_imap_dif,"\n"), file = reportCon, append = TRUE)
cat(paste0("      ","Differece(s) between the vcc and imap include following INV_OCC(s):","\n"), file = reportCon, append = TRUE)
cat(paste0("      ",vocc_imap_dif$INV_OCC), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS MATCHED!"), file = reportCon, append = TRUE)  }
}
}
}
}
#############Main Code#############
cat("Running TEST-0: DATABASE INFORMATION!","\n")
Test_0Out=Test_0(dbHandle,reportCon)
Perils=Test_0Out$Peril
Countries=Test_0Out$Country
RiskLinkTableExist=Test_0Out$RLTableExtst
NGTableExist=Test_0Out$NGTableExist
cat("Running Test-15: CONSISTENCY OF DATA BETWEEN VOCC AND IMAP TABLES (KEY IS INV_VOCC)")
Test_15(dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables)
Test_15 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-14:CONSISTENCY OF DATA BETWEEN VCC AND IMAP TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvocccc=paste0(Perils[j],"vocc",Countries[i],collapse="")
ppimapcc=paste0(Perils[j],"imap",Countries[i],collapse="")
vocc_imap_dif = data.table(sqlQuery(dbHandle,paste0("    select (INV_OCC) from ",ppvocccc,"  a
where
not exists (select INV_OCC from ",ppimapcc,"  b
where a.INV_OCC=b.INV_OCC) ")))
nvocc_imap_dif=nrow(vocc_imap_dif)
if (nvocc_imap_dif!=0){
cat(paste0("Number of unmatched records= ",nvocc_imap_dif,"\n"), file = reportCon, append = TRUE)
cat(paste0("      ","Differece(s) between the vcc and imap include following INV_OCC(s):","\n"), file = reportCon, append = TRUE)
cat(paste0("      ",vocc_imap_dif$INV_OCC), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS MATCHED!"), file = reportCon, append = TRUE)  }
}
}
}
}
cat("Running Test-15: CONSISTENCY OF DATA BETWEEN VOCC AND IMAP TABLES (KEY IS INV_VOCC)")
Test_15(dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables)
Test_15 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-14:CONSISTENCY OF DATA BETWEEN VCC AND IMAP TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvocccc=paste0(Perils[j],"vocc",Countries[i],collapse="")
ppimapcc=paste0(Perils[j],"imap",Countries[i],collapse="")
vocc_imap_dif = data.table(sqlQuery(dbHandle,paste0("    select distinct(INV_OCC) from ",ppvocccc,"  a
where
not exists (select INV_OCC from ",ppimapcc,"  b
where a.INV_OCC=b.INV_OCC) ")))
nvocc_imap_dif=nrow(vocc_imap_dif)
if (nvocc_imap_dif!=0){
cat(paste0("Number of unmatched records= ",nvocc_imap_dif,"\n"), file = reportCon, append = TRUE)
cat(paste0("      ","Differece(s) between the vcc and imap include following INV_OCC(s):","\n"), file = reportCon, append = TRUE)
cat(paste0("      ",vocc_imap_dif$INV_OCC), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS MATCHED!"), file = reportCon, append = TRUE)  }
}
}
}
}
cat("Running Test-15: CONSISTENCY OF DATA BETWEEN VOCC AND IMAP TABLES (KEY IS INV_VOCC)")
Test_15(dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables)
####Test-16: CONSISTENCY OF DATA BETWEEN VGEO AND IMAP TABLES (KEY IS INV_KEY)
Test_16 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables){
cat(paste0("\n","\n","\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
cat(paste0('TEST-16:CONSISTENCY OF DATA BETWEEN VGEO AND IMAP TABLES',"\n"), file = reportCon, append = TRUE)
cat(paste0("\n","#################################################################################################################","\n","\n"), file = reportCon, append = TRUE)
nPerils=length(Perils)
nCountries=length(Countries)
for (i in 1:nCountries)
{
cat(paste0("\n","\n",toupper(Countries[i]),":","\n"), file = reportCon, append = TRUE)
for (j in 1:nPerils){
Tables_Required<- VulnDb_ExpectedTables[Country==Countries[i] & Peril==Perils[j]]$Table
if (length(Tables_Required)!=0) {
dummyname=paste0("'",Countries[i],"'",collapse="")
ppvgeocc=paste0(Perils[j],"vgeo",Countries[i],collapse="")
ppimapcc=paste0(Perils[j],"imap",Countries[i],collapse="")
vgeo_imap_dif = data.table(sqlQuery(dbHandle,paste0("       SELECT
T1.INV_KEY
FROM
(SELECT DISTINCT INV_KEY FROM ",ppvgeocc," ) T1
left JOIN
(SELECT DISTINCT INV_KEY FROM ",ppimapcc," ) T2
ON T1.INV_KEY = T2.INV_KEY where T2.INV_KEY is null  ")))
nvgeo_imap_dif=nrow(vgeo_imap_dif)
if (nvgeo_imap_dif!=0){
cat(paste0("Number of unmatched records= ",nvgeo_imap_dif,"\n"), file = reportCon, append = TRUE)
cat(paste0("      ","Differece(s) between the vgeo and imap include following INV_KEY(s):","\n"), file = reportCon, append = TRUE)
cat(paste0("      ",vgeo_imap_dif$INV_KEY), file = reportCon, append = TRUE)
} else { cat(paste0("\n","      ","PASSED! ALL RECORDS MATCHED!"), file = reportCon, append = TRUE)  }
}
}
}
}
cat("Running Test-16: CONSISTENCY OF DATA BETWEEN VGEO AND IMAP TABLES (KEY IS INV_KEY)")
Test_16 <- function (dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables)
}
cat("Running Test-16: CONSISTENCY OF DATA BETWEEN VGEO AND IMAP TABLES (KEY IS INV_KEY)")
Test_16(dbHandle,reportCon,Perils,Countries,VulnDb_ExpectedTables)
